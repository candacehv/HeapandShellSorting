Heap Sort - Input Size: 50
Original Array: 
1 22 33 40 2 23 8 28 37 45 38 48 25 35 10 15 29 17 20 46 4 18 11 31 50 47 36 13 44 21 12 16 32 41 24 3 9 42 26 39 43 30 19 7 49 6 34 27 14 5 ]
Sorted Array: 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time elapsed for Heap Sort with input size 50: 87 microseconds.

ShellSort with input size 50: 
All Knuth gaps: 
[1 4 13 40 121 364 1093 3280 9841 29524 88573 265720 797161 2391484 7174453 21523360 64570081 193710244 581130733 1743392200 ]
Original array: 
[1 22 33 40 2 23 8 28 37 45 38 48 25 35 10 15 29 17 20 46 4 18 11 31 50 47 36 13 44 21 12 16 32 41 24 3 9 42 26 39 43 30 19 7 49 6 34 27 14 5 ]
Sorted Array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for Knuth Shell Sort with inputsize 50: 66 microseconds.

ShellSort with input size 50 and spaced out prime gaps: 
[1 5 17 53 149 373 1123 3371 10111 30341 91009 272999 ]
Original array: 
[1 22 33 40 2 23 8 28 37 45 38 48 25 35 10 15 29 17 20 46 4 18 11 31 50 47 36 13 44 21 12 16 32 41 24 3 9 42 26 39 43 30 19 7 49 6 34 27 14 5 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for spaced out prime gap Shell Sort with inputsize 50: 62 microseconds.

ShellSort with input size 50 and spaced out even gaps: 
[1 10 30 60 120 360 1080 3240 9720 29160 87480 262440 ]
Original array: 
[1 22 33 40 2 23 8 28 37 45 38 48 25 35 10 15 29 17 20 46 4 18 11 31 50 47 36 13 44 21 12 16 32 41 24 3 9 42 26 39 43 30 19 7 49 6 34 27 14 5 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for spaced out even gap Shell Sort with inputsize 50: 34 microseconds.

ShellSort with input size 50 and Hibbard gaps: 
[1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 ]
Original array: 
[1 22 33 40 2 23 8 28 37 45 38 48 25 35 10 15 29 17 20 46 4 18 11 31 50 47 36 13 44 21 12 16 32 41 24 3 9 42 26 39 43 30 19 7 49 6 34 27 14 5 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for Hibbard gap Shell Sort with inputsize 50: 55 microseconds.

Heap Sort - Input Size: 50
Original Array: 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Sorted Array: 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time elapsed for Heap Sort with input size 50: 13 microseconds.

ShellSort with input size 50: 
All Knuth gaps: 
[1 4 13 40 121 364 1093 3280 9841 29524 88573 265720 797161 2391484 7174453 21523360 64570081 193710244 581130733 1743392200 ]
Original array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Sorted Array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for Knuth Shell Sort with inputsize 50: 3 microseconds.

ShellSort with input size 50 and spaced out prime gaps: 
[1 5 17 53 149 373 1123 3371 10111 30341 91009 272999 ]
Original array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for spaced out prime gap Shell Sort with inputsize 50: 2 microseconds.

ShellSort with input size 50 and spaced out even gaps: 
[1 10 30 60 120 360 1080 3240 9720 29160 87480 262440 ]
Original array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for spaced out even gap Shell Sort with inputsize 50: 3 microseconds.

ShellSort with input size 50 and Hibbard gaps: 
[1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 ]
Original array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for Hibbard gap Shell Sort with inputsize 50: 4 microseconds.

Heap Sort - Input Size: 50
Original Array: 
50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 ]
Sorted Array: 
1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time elapsed for Heap Sort with input size 50: 15 microseconds.

ShellSort with input size 50: 
All Knuth gaps: 
[1 4 13 40 121 364 1093 3280 9841 29524 88573 265720 797161 2391484 7174453 21523360 64570081 193710244 581130733 1743392200 ]
Original array: 
[50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 ]
Sorted Array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for Knuth Shell Sort with inputsize 50: 6 microseconds.

ShellSort with input size 50 and spaced out prime gaps: 
[1 5 17 53 149 373 1123 3371 10111 30341 91009 272999 ]
Original array: 
[50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for spaced out prime gap Shell Sort with inputsize 50: 6 microseconds.

ShellSort with input size 50 and spaced out even gaps: 
[1 10 30 60 120 360 1080 3240 9720 29160 87480 262440 ]
Original array: 
[50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for spaced out even gap Shell Sort with inputsize 50: 7 microseconds.

ShellSort with input size 50 and Hibbard gaps: 
[1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 ]
Original array: 
[50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 ]
Sorted array: 
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ]
Time Elapsed for Hibbard gap Shell Sort with inputsize 50: 5 microseconds.

